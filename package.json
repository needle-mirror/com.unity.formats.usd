{
  "dependencies": {
    "com.unity.timeline": "1.0.0",
    "com.unity.modules.screencapture": "1.0.0",
    "com.unity.modules.physics": "1.0.0"
  },
  "description": "The Unity USD package contains a set of libraries designed to support the use of Pixar's Universal Scene Description (USD) in Unity. The goal of this package is to make it maximally easy to integrate USD using native Unity & C# data types with a familiar serialization paradigm and little prior knowledge of USD. USD enables round-trip asset workflows between digital content creation tools like Maya, 3ds Max, Houdini, Katana, Nuke, Modo, Sketchup, Substance Designer, and Substance Painter. \n\nUnlike other asset file formats, Universal Scene Description is designed to support an entire asset pipeline and to enable teams to work in parallel using asset references and overrides. \n\nThis package includes ready-to-use binaries and examples to allow anyone to easily jump-in.\n\nUSD version: 20.08",
  "displayName": "USD",
  "keywords": [
    "usd",
    "alembic",
    "universal",
    "scene",
    "description",
    "import",
    "export",
    "asset",
    "model",
    "animation",
    "assembly",
    "geometry",
    "shading",
    "usdz",
    "pipeline"
  ],
  "name": "com.unity.formats.usd",
  "repoPackagePath": "package/com.unity.formats.usd",
  "repository": {
    "url": "https://github.com/Unity-Technologies/usd-unity-sdk.git",
    "type": "git",
    "revision": "e67acd5dd3bc30c7a3e74f204d069114d735b32c"
  },
  "unity": "2019.4",
  "version": "3.0.0-exp.3",
  "relatedPackages": {
    "com.unity.formats.usd.tests": "3.0.0-exp.3"
  },
  "_upm": {
    "changelog": "### Features\n- The USD Recorder now has an option to export transform overrides.\n\n### Bug Fixes\n- \"Export Transform Override\" now properly exports modified transforms only.\n- Fixed a bug where importing materials exported from USD version >= 21.11 would fail.\n- Fixed loading of meshes with arbitrary primvars.\n- Fixed regression in animated mesh properties.\n- Fixed timeout when importing complex meshes.\n- Fixed a bug on export where SkelRoot and Skeleton Prim were missing class identifiers.\n- Fixed 'ExportSelectedWithChildren' on Mac.\n- Fixed texture mapping for exported meshes.\n- Fixed  a bug causing PointInstances to be duplicated.\n- Fixed regression in JointsMatch().\n- Fixed scene not being marked dirty after changing load payload flag.\n- Fixed exported Prims not having a type and fixed export for objects with same name.\n- Fixed a bug causing an ApplicationException \"all sample times in times and baseTime must either all be numeric or all be default\" to be thrown when refreshing a PointInstancer.\n- Fixed an import bug causing instanced primitives not to be sanitized to fit Unity formats, including converting basis, triangulating and unwinding meshes, and unrolling primvars.\n\n### Changed\n- GC allocs reduced by half for Scene.GetAttributeAtPath and Scene.GetRelationshipAtPath.\n- Disabled plugins on unsupported platforms.\n- Optimized triangulation to reduce the chance of a \"Timed out while waiting for thread\" error on importing a complex mesh.\n- Optimized PointInstance importing."
  },
  "upmCi": {
    "footprint": "3723327ca2b9598e824740958be70bb7154357dd"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.formats.usd@3.0/manual/index.html",
  "samples": [
    {
      "displayName": "ExportMesh",
      "description": "A sample showing how GameObject can be exported as a USD file (with animation) using Unity's USD APIs directly.",
      "path": "Samples~/ExportMesh"
    },
    {
      "displayName": "HelloUsd",
      "description": "A sample showing how to write and read custom data to and from USDs.",
      "path": "Samples~/HelloUsd"
    },
    {
      "displayName": "ImportMaterials",
      "description": "A sample showing how to import materials from a USD into Unity using Unity's USD APIs directly.",
      "path": "Samples~/ImportMaterials"
    },
    {
      "displayName": "ImportMesh",
      "description": "A sample showing how to import a scene from USD into Unity using Unity's USD APIs directly.",
      "path": "Samples~/ImportMesh"
    },
    {
      "displayName": "ImportProcessor",
      "description": "A sample showing how to implement pre- and post-import processors.",
      "path": "Samples~/ImportProcessor"
    },
    {
      "displayName": "UsdTimelinePlayable",
      "description": "A sample showing how to use the USD integration with Unity's Timeline.",
      "path": "Samples~/UsdTimelinePlayable"
    }
  ]
}
